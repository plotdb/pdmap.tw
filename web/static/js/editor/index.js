// Generated by LiveScript 1.3.1
(function(){
  var lc, ldld, el, dataset, sheets, i, ctrl, vis;
  lc = {
    hover: {},
    scale: d3.interpolateSpectral,
    nameToFeature: {}
  };
  ldld = new ldLoader({
    className: 'ldld full z-fixed'
  });
  ldld.on();
  el = {
    sheet: ld$.find(document, '#sheet', 0),
    preview: ld$.find(document, '#preview', 0)
  };
  dataset = {
    activeSheet: 'admin',
    sheets: sheets = {
      admin: {
        order: {},
        data: [["縣市", "鄉鎮", "數值"]]
      },
      latlng: {
        order: {},
        data: [["緯度", "經度", "數值"]].concat((function(){
          var i$, results$ = [];
          for (i$ = 0; i$ < 50; ++i$) {
            i = i$;
            results$.push(['', '', '']);
          }
          return results$;
        }()))
      }
    },
    random: function(){
      var min, max;
      sheets.admin.data.map(function(d, i){
        if (i > 0) {
          return d[2] = Math.round(Math.random() * 100);
        }
      });
      sheets.latlng.data.map(function(d, i){
        if (!i) {
          return;
        }
        d[0] = Math.random() * 3.2 + 23.89 - 1.6;
        d[1] = Math.random() * 2.4 + 121 - 1.2;
        return d[2] = Math.round(Math.random() * 100);
      });
      min = Math.min.apply(null, sheets.latlng.data.map(function(d){
        return d[2];
      }).splice(1));
      max = Math.max.apply(null, sheets.latlng.data.map(function(d){
        return d[2];
      }).splice(1));
      lc.rscale = d3.scaleSqrt().domain([min, max]).range([0, 0.3]);
      return dataset['switch'](dataset.activeSheet);
    },
    sort: function(arg$){
      var sheet, idx, isAscending, asc, head;
      sheet = arg$.sheet, idx = arg$.idx, isAscending = arg$.isAscending;
      if (!(sheet = sheets[sheet || dataset.activeSheet])) {
        return;
      }
      asc = isAscending != null
        ? sheet.order[idx] = isAscending
        : sheet.order[idx] = !sheet.order[idx];
      asc = asc
        ? 1
        : -1;
      head = sheet.data.splice(0, 1)[0];
      sheet.data.sort(function(a, b){
        return asc * (a[idx] > b[idx]
          ? 1
          : a[idx] < b[idx] ? -1 : 0);
      });
      sheet.data.splice(0, 0, head);
      return dataset.hot.render();
    },
    'switch': function(name){
      var names, res$, k;
      if (!name) {
        res$ = [];
        for (k in sheets) {
          res$.push(k);
        }
        names = res$;
        name = names[(names.indexOf(dataset.activeSheet) + 1) % names.length];
      }
      if (!sheets[name]) {
        return;
      }
      dataset.activeSheet = name;
      dataset.hot.loadData(sheets[dataset.activeSheet].data);
      return dataset.hot.render();
    },
    init: function(){
      var hot;
      Handsontable.renderers.registerRenderer('myrenderer', function(instance, td, row, col, prop, value, cellProperties){
        Handsontable.renderers.TextRenderer.apply(this, arguments);
        if (row === 0) {
          td.classList.add('head');
        }
        if (isNaN(value) || !value) {}
      });
      /*
      sort-order = {}
      sort-data = (idx,asc) ->
        asc = if asc => 1 else -1
        head = sheets.admin.data.splice(0, 1).0
        sheets.admin.data.sort (a,b) -> return asc * (if a[idx] > b[idx] => 1 else if a[idx] < b[idx] => -1 else 0)
        sheets.admin.data.splice 0, 0, head
        hot.render!
      */
      dataset.hot = hot = new Handsontable(el.sheet, {
        afterChange: function(){
          var vals;
          sheets.admin.data.map(function(it){
            if (lc.nameToFeature[it[0]]) {
              return lc.nameToFeature[it[0]][it[1]].properties.value = it[2];
            }
          });
          vals = sheets.admin.data.map(function(it){
            return it[2] || 0;
          }).splice(1);
          lc.max = Math.max.apply(null, vals);
          lc.min = Math.min.apply(null, vals);
          return vis.render();
        },
        afterSelection: function(r1, c1, r2, c2){
          if (!((r1 === r2 && r2 === 0) && c1 === c2 && c2 < 3)) {
            return;
          }
          return dataset.sort({
            idx: c2
          });
        },
        data: sheets.admin.data,
        fixedRowsTop: 1,
        rowHeaders: true,
        colHeaders: true,
        filters: true,
        dropdownMenu: true,
        stretchH: 'all',
        rowHeights: 25,
        minRows: 50,
        minCols: 10,
        cells: function(row, col){
          var cellProperties;
          cellProperties = {};
          cellProperties.renderer = 'myrenderer';
          if (row === 0) {
            cellProperties.readOnly = true;
          }
          return cellProperties;
        },
        customBorders: [{
          range: {
            from: {
              row: 0,
              col: 0
            },
            to: {
              row: 0,
              col: 99
            }
          },
          bottom: {
            width: 2,
            color: '#000'
          }
        }]
      });
      return dataset.random();
    }
  };
  ctrl = {
    view: null,
    download: debounce(350, function(){
      if (ctrl.view != null) {
        return ctrl.view.render('download');
      }
    }),
    init: function(){
      var view;
      return view = new ldView({
        root: document.body,
        handler: {
          download: function(arg$){
            var node, svg, url;
            node = arg$.node;
            if (vis.map && vis.map.root) {
              svg = ld$.find(vis.map.root, 'svg', 0);
            }
            if (!svg) {
              return;
            }
            svg.setAttribute('xmlns', "http://www.w3.org/2000/svg");
            url = URL.createObjectURL(new Blob([svg.outerHTML], {
              type: 'text/svg+xml'
            }));
            node.setAttribute('href', url);
            node.setAttribute('download', 'map.svg');
            return node.classList.remove('disabled');
          }
        },
        action: {
          click: {
            toggle: function(arg$){
              var node;
              node = arg$.node;
              dataset['switch'](node.getAttribute('data-name'));
              view.getAll('toggle').map(function(it){
                return it.classList.remove('active');
              });
              return node.classList.add('active');
            },
            palette: function(arg$){
              var node;
              node = arg$.node;
              return vis.ldpp[0].get().then(function(ret){
                return vis.set('palette', ret);
              });
            },
            random: function(arg$){
              var node;
              node = arg$.node;
              return dataset.random();
            }
          }
        }
      });
    }
  };
  vis = {
    map: null,
    ldpp: ldPalettePicker.init({
      ldcv: {},
      pals: ldPalettePicker.get("loadingio")
    }),
    set: function(name, value){
      var pal, d;
      if (name !== 'palette') {
        return;
      }
      if (!value) {
        return;
      }
      pal = value.colors.map(function(it){
        return ldColor.hex(it);
      });
      d = pal.map(function(d, i){
        return i / (pal.length - 1);
      });
      lc.scale = d3.scaleLinear().domain(d).range(pal).interpolate(d3.interpolateHcl);
      return vis.render();
    },
    render: function(){
      var root;
      root = d3.select(vis.map.root);
      root.selectAll('path').transition().duration(350).attr('fill', function(it){
        var val;
        val = (it.properties.value - lc.min) / (lc.max - lc.min || 1);
        return lc.scale(val);
      });
      root.select('g').selectAll('circle').data(sheets.latlng.data).enter().append('circle');
      root.select('g').selectAll('circle').attr('fill', function(){
        return '#000';
      }).attr('fill-opacity', 0.2).attr('cx', function(d, i, n){
        var ref$, lat, lng, ret;
        ref$ = [d[0], d[1]], lat = ref$[0], lng = ref$[1];
        ret = pdmaptw.projection([lng, lat])[0];
        return isNaN(ret) ? 0 : ret;
      }).attr('cy', function(d, i, n){
        var ref$, lat, lng, ret;
        ref$ = [d[0], d[1]], lat = ref$[0], lng = ref$[1];
        ret = pdmaptw.projection([lng, lat])[1];
        return isNaN(ret) ? 0 : ret;
      }).attr('r', function(d, i){
        var ret;
        ret = lc.rscale ? lc.rscale(d[2]) : 0;
        return isNaN(ret) ? 0 : ret;
      });
      return ctrl.download();
    },
    init: function(){
      var map;
      vis.map = map = pdmaptw.create({
        root: el.preview,
        type: 'town'
      });
      return map.init().then(function(){
        var n, pals, svg, popup, popupview, fadePopup;
        map.fit();
        n = map.lc.meta.name;
        map.lc.features.map(function(it){
          var ref$, c, t;
          ref$ = [n[it.properties.c], n[it.properties.t]], c = ref$[0], t = ref$[1];
          sheets.admin.data.push([c, t]);
          return ((ref$ = lc.nameToFeature)[c] || (ref$[c] = {}))[t] = it;
        });
        dataset.init();
        pals = ldPalettePicker.get('loadingio').filter(function(it){
          return it.colors.length > 3;
        });
        vis.set('palette', pals[Math.floor(pals.length * Math.random())]);
        svg = ld$.find(vis.map.root, 'svg', 0);
        popup = ld$.find(document.body, '#popup', 0);
        popupview = new ldView({
          root: popup,
          handler: {
            name: function(arg$){
              var node;
              node = arg$.node;
              return node.innerText = lc.hover.name || '';
            },
            value: function(arg$){
              var node;
              node = arg$.node;
              return node.innerText = lc.hover.value;
            }
          }
        });
        fadePopup = debounce(2000, function(){
          return popup.classList.add('ld', 'ld-fade-out');
        });
        svg.addEventListener('mouseover', function(evt){
          var d, c, t, row, v, pbox, bbox, ref$, mx, my, dx, dy, x, y;
          if (!(d = d3.select(evt.target).datum())) {
            return;
          }
          c = map.lc.meta.name[d.properties.c];
          t = map.lc.meta.name[d.properties.t];
          if (!(row = sheets.admin.data.filter(function(it){
            return it[0] === c && it[1] === t;
          })[0])) {
            return;
          }
          v = row[2];
          lc.hover = {
            name: c + "" + t,
            value: v
          };
          popupview.render();
          pbox = popup.parentNode.getBoundingClientRect();
          bbox = popup.getBoundingClientRect();
          ref$ = [evt.clientX - pbox.x, evt.clientY - pbox.y], mx = ref$[0], my = ref$[1];
          dx = (mx < pbox.width / 2
            ? 1
            : -1) * ((ref$ = pbox.width * 0.05) > 20 ? ref$ : 20);
          dy = (my < pbox.height / 2
            ? 1
            : -1) * ((ref$ = pbox.height * 0.05) > 20 ? ref$ : 20);
          if (mx > pbox.width / 2) {
            dx -= bbox.width;
          }
          if (my > pbox.height / 2) {
            dy -= bbox.height;
          }
          ref$ = [mx + dx, my + dy], x = ref$[0], y = ref$[1];
          popup.style.transform = "translate(" + x + "px, " + y + "px)";
          popup.classList.remove('ld', 'ld-fade-out', 'd-none');
          return fadePopup();
        });
        return ldld.off();
      });
    }
  };
  vis.init();
  return ctrl.init();
})();
/*
  * customizable data path
  * map init promise hint in doc
  * properties access
  * how to customize
  * how to access / update data
*/